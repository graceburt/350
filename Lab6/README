### Task 1 : getenv() function
  • Write your own getenv() function called mygetenv() which has same syntax and semantics.
  • Write a simple C program to show your mygetenv() function works well.

### Task 2: Creating New Processes using fork
 • Copy fork1.c from BLP 4th edition, page 474(page 457 in BLP 3rd edition). 
 • Compile and run it to be sure you understand what it does. 
 • Modify your fork1.c to take four command-line arguments: 
  1. Nc-number of iterations for child process 
  2. Np-number of iterations for parent process 3.Tc-sleep time for child process 4.Tp-sleep time for parent process Then, modify the code accordingly. D.Run the program as fork15311. You should get the same result as running the original version. E.Run the program with the following values (and any other values you find interesting): NcNpTcTp53155351Task 3: Using waitA.Copy your modified fork1.cto a file named forkWait.c. B.Modify forkWait.cso the parent process waits for the child to finish. Use the code from BLP 4thedition inpage475 (page 458 in 3rdedition), for the wait portion. 
COSC350 System Software, Spring 20202C.Print your modified forkWait.cto hand in. D.Run your forkWaitwith Nc=5, Np=3, Tc=1, and Tp=1. E.Briefly describe how your result differs from the original program in Task2. Explain. Task 4: forkwith execThis task forks a child process and uses execto replace its process image with another image. It's very similar to Task3, but the child process is implemented as a separate program. A.Copy forkWait.cfrom Task4 to a file named forkExec.cB.Modify forkExec.cso the child process image is replaced by the image of a program named child. Use one of the execfamily of functions to do this. C.Write child.cto do the same thing as the child process did in Task4. oThe child should give its pid each time it prints the message. oThe parent should give its pid each time it prints the message. oThe childprogram should take three command-line arguments, the message, Nc, and Tc. oTo get an interesting exit status from the child, have it return37, rather than0. Task 5: file sharing between parent and child.•Write a C program such thatreceive an inputfile name as anargument andopen thefile as inputs. And then create a child process.  Input file must open only one time and the file descriptor is shared by parent and child process.Both the parent and the child read a byte at a timefrom theinput file and writeoutput to independent files(parent.txt for parent output, child.txt for child output).The parent process collect numericcharacters and child collect non-numbericcharacters.  Without any form of synchronization, parent and child process will create wrong output files.•Modify the previous programand try to synchronize and get correct outputs for each process.Note)oDo not open the input file twice for synchronization. oDefine your own function to check numeric character. oDo not use vfork(), sleep(), wait() or waitpid() forsynchronization.
oCheck all possible errors for system calls
